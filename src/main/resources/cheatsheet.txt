//// Incognito mode

* US#1

** Authenticate

PanglossAuthenticationProvider:


jdbcTemplate.queryForObject("Select * from users where username='" + name + "' and password='" + password + "'",
                        BeanPropertyRowMapper.newInstance(DBUser.class));

** Deactivate csrf

WebSecurityConfig#configure:

http.csrf().disable();

** Open CORS

WebSecurityConfig:

    @Bean
    public CorsFilter corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true);
        config.addAllowedOrigin("*");
        config.addAllowedHeader("*");
        config.addAllowedMethod("*");
        source.registerCorsConfiguration("/**", config);
        return new CorsFilter(source);
    }

* US#2:

CartEntity:

@Column(length = 5000)
private String address = "";

+ getter & setter

* US#3

XMLParserConfig:
    @Bean
    public XmlMapper xmlMapper() {
        return new XmlMapper(XMLInputFactory.newFactory());
    }

* US#4

ItemController:
    @DeleteMapping("/{id}")
    public Item delete(@PathVariable String id) {
        return items.delete(id);
    }

* US#5

application.yml

snippet => accesslog


mitigated:

jdbcTemplate.queryForObject("Select * from users where username=? and password=?",
                        BeanPropertyRowMapper.newInstance(DBUser.class),
                        name, credentials);
*